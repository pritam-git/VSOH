tinymce.PluginManager.add("sysviewhelper", function (e) {
	function t(callback) {
		return function() {
			var linkList = e.settings.link_list;

			if (typeof(linkList) == "string") {
				tinymce.util.XHR.send({
					url: linkList,
					success: function(text) {
						callback(tinymce.util.JSON.parse(text));
					}
				});
			} else {
				callback(linkList);
			}
		};
	}

	function n(linkList) {
		var data = {}, selection = e.selection, dom = e.dom, selectedElm, anchorElm, initialText;
		var win, linkListCtrl, relListCtrl, targetListCtrl;

		function buildTargetList(targetValue) {
			var targetListItems = [{text: 'None', value: ''}];

			tinymce.each(e.settings.sysviewhelper_list, function(target) {
				targetListItems.push({
					text: target.text || target.title,
					value: target.value,
					selected: targetValue === target.value
				});
			});

			return targetListItems;
		}

		// Focus the editor since selection is lost on WebKit in inline mode
		e.focus();

		selectedElm = selection.getNode();
		anchorElm = dom.getParent(selectedElm, 'img[data-l8m-object=div]');
		if (anchorElm) {
			selection.select(anchorElm);
		}

		data.target = anchorElm ? dom.getAttrib(anchorElm, 'data-mce-p-data-rel') : '';
		data.width = anchorElm ? dom.getAttrib(anchorElm, 'width') : '';
		data.height = anchorElm ? dom.getAttrib(anchorElm, 'height') : '';
		data.ignoredimension = anchorElm ? dom.getAttrib(anchorElm, 'data-mce-p-data-ignoredimension') : 'false';
		if (data.ignoredimension == 'false') {
			data.ignoredimension = '';
		}
		data.parameters = anchorElm ? dom.getAttrib(anchorElm, 'data-mce-p-data-parameters') : '';
		data.removesysview = anchorElm ? dom.getAttrib(anchorElm, 'data-mce-p-data-removesysview') : 'false';
		if (data.removesysview == 'false') {
			data.removesysview = '';
		}

		if (e.settings.sysviewhelper_list !== false) {
			targetListCtrl = [{
				name: 'target',
				type: 'listbox',
				label: 'ViewHelper',
				values: buildTargetList(data.target)
			}, {
				type: "container",
				label: "Dimensions",
				layout: "flex",
				direction: "row",
				align: "center",
				spacing: 5,
				items: [{
					name: "width",
					type: "textbox",
					maxLength: 3,
					size: 3,
					value: data.width
				}, {
					type: "label",
					text: "x"
				}, {
					name: "height",
					type: "textbox",
					maxLength: 3,
					size: 3,
					value: data.height
				}, {
					name: "ignoredimension",
					type: "checkbox",
					checked: data.ignoredimension,
					text: "Ignore in HTML"
				}]
			}, {
				type: "container",
				label: "Parameters",
				layout: "flex",
				direction: "row",
				align: "center",
				spacing: 5,
				items: [{
					name: "parameters",
					type: "textbox",
					value: data.parameters,
					size: 50
				}]
			}, {
				type: "container",
				label: "Remove SysView-Container",
				layout: "flex",
				direction: "row",
				align: "center",
				spacing: 5,
				items: [{
					name: "removesysview",
					type: "checkbox",
					value: data.removesysview,
					size: 50
				}]
			}];
		}

		win = e.windowManager.open({
			title: 'Insert\/edit ViewHelper',
			data: data,
			style: 'width: 400px;',
			body: targetListCtrl,
			onSubmit: function(t) {
				var data = t.data, r = data.target;
				var rw = parseInt(data.width), rh = parseInt(data.height), rws, rhs;

				if (isNaN(rw) ||
					rw < 16) {
					
					rws = '16';
				} else {
					rws = rw.toString();
				}
				
				if (isNaN(rh) ||
					rh < 16) {
					
					rhs = '16';
				} else {
					rhs = rh.toString();
				}

				if (anchorElm) {
					dom.setAttribs(anchorElm, {
						width: rws,
						height: rhs,
						style: 'width: ' + rws + 'px; height: ' + rhs + 'px;',
						"class": "sysviewhelper l8m-object",
						'data-mce-p-class': 'sysviewhelper l8m-object',
						'data-mce-p-data-rel': r,
						'data-mce-p-data-ignoredimension': data.ignoredimension,
						'data-mce-p-data-parameters': data.parameters,
						'data-mce-p-data-removesysview': data.removesysview,
						'data-mce-html': '###:' + r + ':###'
					});
				} else {
					e.insertContent(dom.createHTML('img', {
						width: rws,
						height: rhs,
						style: 'width: ' + rws + 'px; height: ' + rhs + 'px;',
						src: tinymce.Env.transparentSrc,
						"class": "sysviewhelper l8m-object",
						'data-mce-p-class': 'sysviewhelper l8m-object',
						"data-l8m-object": 'div',
						'data-mce-p-data-rel': r,
						'data-mce-p-data-ignoredimension': data.ignoredimension,
						'data-mce-p-data-parameters': data.parameters,
						'data-mce-p-data-removesysview': data.removesysview,
						'data-mce-html': '###:' + r + ':###'
					}));
				}
				return
			}
		});
	}
	
	e.on('ResolveName', function(e) {
		var name;

		if (e.target.nodeType == 1 && (name = e.target.getAttribute("data-l8m-object"))) {
			e.name = name;
		}
	}),
	
	e.on("preInit", function () {
		// Converts SYS-DIV into placeholder images
		e.parser.addNodeFilter("div", function (nodes, name) {
			var i = nodes.length, ai, node, placeHolder, attrName, attrValue, attribs, innerHtml;

			while (i--) {
				node = nodes[i];
				if (typeof node.attr('class')  != 'undefined' &&
					node.attr('class').indexOf('sysviewhelper') !== -1 &&
					node.attr('class').indexOf('l8m-object') !== -1) {
					
					placeHolder = new tinymce.html.Node('img', 1);
					placeHolder.shortEnded = true;
	
					// Prefix all attributes except width, height and style since we
					// will add these to the placeholder
					attribs = node.attributes;
					ai = attribs.length;
					while (ai--) {
						attrName = attribs[ai].name;
						attrValue = attribs[ai].value;
	
						if (attrName !== "width" && attrName !== "height" && attrName !== "style") {
							placeHolder.attr('data-mce-p-' + attrName, attrValue);
						}
					}
	
					// Place the inner HTML contents inside an escaped attribute
					// This enables us to copy/paste the fake object
					innerHtml = node.firstChild && node.firstChild.value;
					if (innerHtml) {
						placeHolder.attr("data-mce-html", escape(innerHtml));
						placeHolder.firstChild = null;
					}
					
					var xWidth = '300';
					var xHeight = '150';
					
					var styleString = node.attr('style');
					if (typeof styleString != 'undefined') {
						var stylePartsString = styleString.split(";");
						for (var is = 0; is < stylePartsString.length; is++) {
							var styleCombo = stylePartsString[is].trim().split(':');
							if (styleCombo.length == 2) {
								styleCombo[0] = styleCombo[0].trim();
								styleCombo[1] = styleCombo[1].trim();
								
								if (styleCombo[0] == 'width') {
									xWidth = styleCombo[1].substring(0, styleCombo[1].length - 2);
								} else
								if (styleCombo[0] == 'height') {
									xHeight = styleCombo[1].substring(0, styleCombo[1].length - 2);
								}
							}
						}
					}
					
					placeHolder.attr({
						width: xWidth,
						height: xHeight,
						style: node.attr('style'),
						src: tinymce.Env.transparentSrc,
						"data-l8m-object": name,
						"class": "sysviewhelper l8m-object"
					});
	
					node.replace(placeHolder);
				}
			}
		}),
		
		// Replaces placeholder images with real elements for SYS-DIV
		e.serializer.addAttributeFilter("data-l8m-object", function (nodes, name) {
			var i = nodes.length, node, realElm, ai, attribs, innerHtml, innerNode;

			while (i--) {
				node = nodes[i];
				realElm = new tinymce.html.Node(node.attr(name), 1);

				realElm.attr({
					style: 'width: ' + node.attr('width') + 'px; height: ' + node.attr('height') + 'px;'
				});

				// Unprefix all placeholder attributes
				attribs = node.attributes;
				ai = attribs.length;
				while (ai--) {
					var attrName = attribs[ai].name;

					if (attrName.indexOf('data-mce-p-') === 0) {
						realElm.attr(attrName.substr(11), attribs[ai].value);
					}
				}
				
				// CSS - Class should be standard
				// in Back-End there is although 'tinymce-backend' prepended 
				realElm.attr('class', 'sysviewhelper l8m-object');

				// Inject innerhtml
				innerHtml = node.attr('data-mce-html');
				if (innerHtml) {
					innerNode = new tinymce.html.Node('#text', 3);
					innerNode.raw = true;
					innerNode.value = unescape(innerHtml);
					realElm.append(innerNode);
				}
				
				node.replace(realElm);
			}
		})
	}),
	
	e.on('objectResized', function(e) {
		var target = e.target, html;

		if (target.getAttribute('data-l8m-object')) {
			target.setAttribute('width', e.width);
			target.setAttribute('height', e.height);
		}
	}),
	
	e.addButton("sysviewhelper", {
		image: "/img/icon/lightning_grey.png",
		tooltip: "Insert\/edit ViewHelper",
		shortcut: "",
		onclick: t(n),
		stateSelector: "img[data-l8m-object=div]"
	})
});