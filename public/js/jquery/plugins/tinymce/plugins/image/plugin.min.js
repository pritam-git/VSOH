tinymce.PluginManager.add("image", function (e) {
	function t(e, t) {
		function n(e, n) {
			if (i.parentNode) {
				i.parentNode.removeChild(i), t({
					width: e,
					height: n
				})
			}
		}
		var i = new Image;
		i.onload = function () {
			n(i.clientWidth, i.clientHeight)
		}, i.onerror = function () {
			n()
		}, i.src = e;
		var o = i.style;
		o.visibility = "hidden", o.position = "fixed", o.bottom = o.left = 0, o.width = o.height = "auto", document.body.appendChild(i)
	}

	function n(t) {
		return function () {
			var n = e.settings.image_list;
			"string" == typeof n ? tinymce.util.XHR.send({
				url: n,
				success: function (e) {
					t(tinymce.util.JSON.parse(e))
				}
			}) : t(n)
		}
	}

	function i(n) {
		function i() {
			var e = [{
				text: "None",
				value: ""
			}];
			return tinymce.each(n, function (t) {
				e.push({
					text: t.text || t.title,
					value: t.value || t.url,
					menu: t.menu
				})
			}), e
		}
		function absurl() {
			var useAbsolutUrl = c.find('#absoluteurl')[0].value();
			var srcObj = c.find("#src")[0];
			var src = srcObj.value();
			var url = window.location.href;
			var arr = url.split("/");
			var absUrl = arr[0] + "//" + arr[2];
			var isAbsUrl = false;
			
			if (src.substring(0, 7) == 'http://' ||
				src.substring(0, 8) == 'https://') {
				
				isAbsUrl = true;
			}
			
			if (useAbsolutUrl) {
				if (!isAbsUrl) {
					src = absUrl + src;
				}
			} else {
				if (isAbsUrl &&
					src.substring(0, absUrl.length) == absUrl) {
					
					src = src.substring(absUrl.length);
				}
			}
			srcObj.value(src);
		}
		
		function o(e) {
			var t, n, i, o;
			t = c.find("#width")[0], n = c.find("#height")[0], i = t.value(), o = n.value(), c.find("#constrain")[0].checked() && d && m && i && o && (e.control == t ? (o = Math.round(i / d * o), n.value(o)) : (i = Math.round(o / m * i), t.value(i))), d = i, m = o
		}

		function a() {
			function t(t) {
				function i() {
					t.onload = t.onerror = null, e.selection.select(t), e.nodeChanged()
				}
				t.onload = function () {
					n.width || n.height || g.setAttribs(t, {
						width: t.clientWidth,
						height: t.clientHeight
					}), i()
				}, t.onerror = i
			}
			var n = c.toJSON();
			"" === n.width && (n.width = null), "" === n.height && (n.height = null), "" === n.style && (n.style = null), n = {
				src: n.src,
				alt: n.alt,
				width: n.width,
				height: n.height,
				style: n.style
			}, f ? g.setAttribs(f, n) : (n.id = "__mcenew", e.insertContent(g.createHTML("img", n)), f = g.get("__mcenew"), g.setAttrib(f, "id", null)), t(f)
		}

		function l(e) {
			return e && (e = e.replace(/px$/, "")), e
		}

		function r() {
			t(this.value(), function (e) {
				e.width && e.height && (d = e.width, m = e.height, c.find("#width").value(d), c.find("#height").value(m))
			})
			var url = window.location.href;
			var arr = url.split("/");
			var absUrl = arr[0] + "//" + arr[2];
			if (c.find('#absoluteurl').length &&
				this.value().substring(0, absUrl.length) == absUrl) {
				
				c.find('#absoluteurl')[0].value(true);
			}
		}

		function s() {
			function e(e) {
				return e.length > 0 && /^[0-9]+$/.test(e) && (e += "px"), e
			}
			var t = c.toJSON(),
				n = g.parseStyle(t.style);
			delete n.margin, n["margin-top"] = n["margin-bottom"] = e(t.vspace), n["margin-left"] = n["margin-right"] = e(t.hspace), n["border-width"] = e(t.border), c.find("#style").value(g.serializeStyle(g.parseStyle(g.serializeStyle(n))))
		}
		var c, u, d, m, h, g = e.dom,
			f = e.selection.getNode();
		d = g.getAttrib(f, "width"), m = g.getAttrib(f, "height"), "IMG" != f.nodeName || (f.getAttribute("data-mce-object") || f.getAttribute("data-l8m-object")) ? f = null : u = {
			src: g.getAttrib(f, "src"),
			alt: g.getAttrib(f, "alt"),
			width: d,
			height: m
		}, n && (h = {
			name: "target",
			type: "listbox",
			label: "Image list",
			values: i(),
			onselect: function (e) {
				var t = c.find("#alt");
				(!t.value() || e.lastControl && t.value() == e.lastControl.text()) && t.value(e.control.text()), c.find("#src").value(e.control.value())
			}
		});
		var filepickerWidth = '221';
		var absUrlChkBox;
		if (!e.settings.remove_script_host &&
			!e.settings.relative_urls &&
			e.settings.convert_urls) {
			
			absUrlChkBox = {
					name: "absoluteurl",
					type: "checkbox",
					style: 'margin-top: 6px;',
					checked: 0,
					text: "Absolute URL",
					onclick: absurl
				};
		}
		var p = [{
					type: "container",
					label: "Source",
					layout: "flex",
					direction: "row",
					spacing: 5,
					items: [{
						name: "src",
						type: "filepicker",
						filetype: "image",
						size: 150,
						autofocus: !0,
						onchange: r,
						style: 'width: ' + filepickerWidth + 'px;'
					},{
						name: "browser",
						type: "button",
						style: 'width: 28px; height: 28px; background-image:url(/img/system/icon/images.png); background-position: 6px 6px; background-repeat: no-repeat;',
						onclick: function() {
							/**
							 * source Object
							 */
							srcObj = c.find("#src")[0];
							
							
							/**
							 * description Object
							 */
							altObj = c.find("#alt")[0];
							
							/**
							 * width Object
							 */
							widthObj = c.find("#width")[0];
							
							/**
							 * height Object
							 */
							heightObj = c.find("#height")[0];
							
							/**
							 * absolute url
							 */
							var absUrlID = null;
							if (c.find("#absoluteurl").length > 0) {
								absUrlObj = c.find("#absoluteurl")[0];
								absUrlID = absUrlObj._id;
							}
							
							/**
							 * prepare PopUp
							 */
							var popUp = '<div class="mediaBrowserPopUp" style="z-index: 65537; position: fixed; width:860px; height:577px; top:10px; left:50%; margin-left:-430px; overflow:hidden; background: url(/img/js/ajax-loader.gif) no-repeat scroll center center #FFFFFF; border-radius: 6px 6px 6px 6px; box-shadow: 0 3px 7px rgba(0, 0, 0, 0.3);">' +
										'	<div class="mce-window-head">' +
										'		<div class="mce-title">MediaBrowser</div>' +
										'		<button style="background-color: #ffffff; border: medium none; font-family: Helvetica Neue, Helvetica, Arial;" class="mce-close close-browser" aria-hidden="true" type="button">x</button>' +
										'	</div>' +
										'	<div class="innerMediaBrowserPopUp">' +
										'	</div>' +
										'</div>';
							$('body').append(popUp);
							
							/**
							 * close media browser
							 */
							$("button.close-browser").click(function() {
								$('div.mediaBrowserPopUp').remove();
							});
							
							/**
							 * add Browser
							 */
							var popUpClassID = '';
							if ($.browser.msie) {
								popUpClassID = ' classid="clsid:25336920-03F9-11CF-8FD0-00AA00686F13"';
							}
							
							var iframeObj = '<object' + popUpClassID + ' type="text/html" data="/system/media/index/browserType/popup-tinymce?type=image&popUpInputSrc=' + srcObj._id + '-inp&popUpInputAlt=' + altObj._id + '&popUpInputWidth=' + widthObj._id + '&popUpInputHeight=' + heightObj._id + '&popUpInputAbsUrl=' + absUrlID + '" style="width:860px; height:537px;" width="860" height="537"></object>';
							iframeObj = '<iframe src="/system/media/index/browserType/popup-tinymce?type=image&popUpInputSrc=' + srcObj._id + '-inp&popUpInputAlt=' + altObj._id + '&popUpInputWidth=' + widthObj._id + '&popUpInputHeight=' + heightObj._id + '&popUpInputAbsUrl=' + absUrlID + '" style="width:860px; height:537px;" width="860" height="537"></iframe>';
							$('div.innerMediaBrowserPopUp').append(iframeObj);
						}
					}, 
					absUrlChkBox
					]
			},
			h, {
				name: "alt",
				type: "textbox",
				label: "Image description"
			}, {
				type: "container",
				label: "Dimensions",
				layout: "flex",
				direction: "row",
				align: "center",
				spacing: 5,
				items: [{
					name: "width",
					type: "textbox",
					maxLength: 3,
					size: 3,
					onchange: o
				}, {
					type: "label",
					text: "x"
				}, {
					name: "height",
					type: "textbox",
					maxLength: 3,
					size: 3,
					onchange: o
				}, {
					name: "constrain",
					type: "checkbox",
					checked: !0,
					text: "Constrain proportions"
				}]
			}
		];
		e.settings.image_advtab ? (f && (u.hspace = l(f.style.marginLeft || f.style.marginRight), u.vspace = l(f.style.marginTop || f.style.marginBottom), u.border = l(f.style.borderWidth), u.style = e.dom.serializeStyle(e.dom.parseStyle(e.dom.getAttrib(f, "style")))), c = e.windowManager.open({
			title: "Insert/edit image",
			data: u,
			bodyType: "tabpanel",
			body: [{
				title: "General",
				type: "form",
				items: p
			}, {
				title: "Advanced",
				type: "form",
				pack: "start",
				items: [{
					label: "Style",
					name: "style",
					type: "textbox"
				}, {
					type: "form",
					layout: "grid",
					packV: "start",
					columns: 2,
					padding: 0,
					alignH: ["left", "right"],
					defaults: {
						type: "textbox",
						maxWidth: 50,
						onchange: s
					},
					items: [{
						label: "Vertical space",
						name: "vspace"
					}, {
						label: "Horizontal space",
						name: "hspace"
					}, {
						label: "Border",
						name: "border"
					}]
				}]
			}],
			onSubmit: a
		})) : c = e.windowManager.open({
			title: "Edit image",
			data: u,
			body: p,
			onSubmit: a
		})
		
		var srcObj = c.find("#src")[0];
		var src = srcObj.value();
		var url = window.location.href;
		var arr = url.split("/");
		var absUrl = arr[0] + "//" + arr[2];
		if (c.find('#absoluteurl').length &&
			src.substring(0, absUrl.length) == absUrl) {

			c.find('#absoluteurl')[0].value(true);
		}
	}
	e.addButton("image", {
		icon: "image",
		tooltip: "Insert/edit image",
		onclick: n(i),
		stateSelector: "img:not([data-mce-object], [data-l8m-object])"
	}), e.addMenuItem("image", {
		icon: "image",
		text: "Insert image",
		onclick: n(i),
		context: "insert",
		prependToContext: !0
	})
});