tinymce.PluginManager.add("link", function (e) {
	function t(t) {
		return function () {
			var n = e.settings.link_list;
			"string" == typeof n ? tinymce.util.XHR.send({
				url: n,
				success: function (e) {
					t(tinymce.util.JSON.parse(e))
				}
			}) : t(n)
		}
	}

	function n(t) {
		function n() {
			var e = [{
				text: "None",
				value: ""
			}];
			return tinymce.each(t, function (t) {
				e.push({
					text: t.text || t.title,
					value: t.value || t.url,
					menu: t.menu
				})
			}), e
		}

		function i(t) {
			var n = [{
				text: "None",
				value: ""
			}];
			return tinymce.each(e.settings.rel_list, function (e) {
				n.push({
					text: e.text || e.title,
					value: e.value,
					selected: t === e.value
				})
			}), n
		}

		function a(t) {
			var n = [{
				text: "None",
				value: ""
			}];
			return e.settings.target_list || n.push({
				text: "New window",
				value: "_blank"
			}), tinymce.each(e.settings.target_list, function (e) {
				n.push({
					text: e.text || e.title,
					value: e.value,
					selected: t === e.value
				})
			}), n
		}

		function r() {
			s || 0 !== f.text.length || this.parent().parent().find("#text")[0].value(this.value())
		}
		var o, l, s, c, u, d, m, f = {}, g = e.selection,
			h = e.dom;
		e.focus(), o = g.getNode(), l = h.getParent(o, "a[href]"), l && g.select(l), f.text = s = g.getContent({
			format: "text"
		}), f.href = l ? h.getAttrib(l, "href") : "", f.target = l ? h.getAttrib(l, "target") : "", f.rel = l ? h.getAttrib(l, "rel") : "", "IMG" == o.nodeName && (f.text = s = " "), t && (u = {
			type: "listbox",
			label: "Link list",
			values: n(),
			onselect: function (e) {
				var t = c.find("#text");
				(!t.value() || e.lastControl && t.value() == e.lastControl.text()) && t.value(e.control.text()), c.find("#href").value(e.control.value())
			}
		}), e.settings.target_list !== !1 && (m = {
			name: "target",
			type: "listbox",
			label: "Target",
			values: a(f.target)
		}), e.settings.rel_list && (d = {
			name: "rel",
			type: "listbox",
			label: "Rel",
			values: i(f.rel)
		});

		var hrefWidth = '238';
		if ($.browser.webkit) {
			var hrefWidth = '230';
		}
		var c = e.windowManager.open({
			title: "Insert link",
			data: f,
			body: [{
					type: "container",
					label: "Source",
					layout: "flex",
					direction: "row",
					items: [{
						name: "href",
						type: "filepicker",
						filetype: "file",
						size: 40,
						autofocus: !0,
						label: "Url",
						onchange: r,
						onkeyup: r,
						style: 'width: ' + hrefWidth + 'px;'
					}, {
						name: "browser",
						type: "button",
						style: 'width: 28px; height: 28px; background-image:url(/img/system/icon/images.png); background-position: 6px 6px; background-repeat: no-repeat; margin-left: 5px;',
						onclick: function() {
							/**
							 * source Object
							 */
							srcObj = c.find("#href")[0]
							
							/**
							 * description Object
							 */
							altObj = c.find("#text")[0]
							
							/**
							 * prepare PopUp
							 */
							var popUp = '<div class="mediaBrowserPopUp" style="z-index: 65537; position: fixed; width:860px; height:577px; top:10px; left:50%; margin-left:-430px; overflow:hidden; background: url(/img/js/ajax-loader.gif) no-repeat scroll center center #FFFFFF; border-radius: 6px 6px 6px 6px; box-shadow: 0 3px 7px rgba(0, 0, 0, 0.3);">' +
										'	<div class="mce-window-head">' +
										'		<div class="mce-title">MediaBrowser</div>' +
										'		<button style="background-color: #ffffff; border: medium none; font-family: Helvetica Neue, Helvetica, Arial;" class="mce-close close-browser" aria-hidden="true" type="button">x</button>' +
										'	</div>' +
										'	<div class="innerMediaBrowserPopUp">' +
										'	</div>' +
										'</div>';
							$('body').append(popUp);
							
							/**
							 * close media browser
							 */
							$("button.close-browser").click(function() {
								$('div.mediaBrowserPopUp').remove();
							});
							
							/**
							 * add Browser
							 */
							var popUpClassID = '';
							if ($.browser == 'msie') {
								popUpClassID = ' classid="clsid:25336920-03F9-11CF-8FD0-00AA00686F13"';
							}
							
							var iframeObj = '<object' + popUpClassID + ' type="text/html" data="/system/media/index/browserType/popup-tinymce?type=all&popUpInputSrc=' + srcObj._id + '-inp&popUpInputAlt=' + altObj._id + '" style="width:860px; height:537px;" width="860" height="537"></object>';
							iframeObj = '<iframe src="/system/media/index/browserType/popup-tinymce?type=all&popUpInputSrc=' + srcObj._id + '-inp&popUpInputAlt=' + altObj._id + '" style="width:860px; height:537px;" width="860" height="537"></iframe>';
							$('div.innerMediaBrowserPopUp').append(iframeObj);
						}
					}]
				}, {
					name: "text",
					type: "textbox",
					size: 40,
					label: "Text to display",
					onchange: function () {
						f.text = this.value()
					}
				},
				u, d, m
			],
			onSubmit: function (t) {
				function n(t, n) {
					window.setTimeout(function () {
						e.windowManager.confirm(t, n)
					}, 0)
				}

				function i() {
					a.text != s ? l ? (e.focus(), l.innerHTML = a.text, h.setAttribs(l, {
						href: r,
						target: a.target ? a.target : null,
						rel: a.rel ? a.rel : null
					}), g.select(l)) : e.insertContent(h.createHTML("a", {
						href: r,
						target: a.target ? a.target : null,
						rel: a.rel ? a.rel : null
					}, a.text)) : e.execCommand("mceInsertLink", !1, {
						href: r,
						target: a.target,
						rel: a.rel ? a.rel : null
					})
				}
				var a = t.data,
					r = a.href;
				return r ? r.indexOf("@") > 0 && -1 == r.indexOf("//") && -1 == r.indexOf("mailto:") ? (n("The URL you entered seems to be an email address. Do you want to add the required mailto: prefix?", function (e) {
					e && (r = "mailto:" + r), i()
				}), void 0) : /^\s*www\./i.test(r) ? (n("The URL you entered seems to be an external link. Do you want to add the required http:// prefix?", function (e) {
					e && (r = "http://" + r), i()
				}), void 0) : (i(), void 0) : (e.execCommand("unlink"), void 0)
			}
		})
	}
	e.addButton("link", {
		icon: "link",
		tooltip: "Insert/edit link",
		shortcut: "Ctrl+K",
		onclick: t(n),
		stateSelector: "a[href]"
	}), e.addButton("unlink", {
		icon: "unlink",
		tooltip: "Remove link",
		cmd: "unlink",
		stateSelector: "a[href]"
	}), e.addShortcut("Ctrl+K", "", n), this.showDialog = n, e.addMenuItem("link", {
		icon: "link",
		text: "Insert link",
		shortcut: "Ctrl+K",
		onclick: t(n),
		stateSelector: "a[href]",
		context: "insert",
		prependToContext: !0
	})
});