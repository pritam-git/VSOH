<?php

/**
 * Default_Model_Base_Coupon
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $code
 * @property decimal $value
 * @property boolean $is_used
 * @property integer $entity_user_id
 * @property timestamp $end_of_validity
 * @property decimal $original_value
 * @property string $customer_email
 * @property string $customer_phone
 * @property string $customer_firstname
 * @property string $customer_lastname
 * @property string $customer_street
 * @property string $customer_street_number
 * @property string $customer_zip
 * @property string $customer_city
 * @property string $customer_country
 * @property Default_Model_EntityUser $EntityUser
 * @property Doctrine_Collection $ProductOrder
 * @property Doctrine_Collection $CouponHistory
 * 
 * @package    L8M
 * @subpackage Models (Default Module)
 * @author     Norbert Marks <nm@l8m.com>
 * @version    SVN: $Id: Builder.php 7 2014-03-11 16:18:40Z nm $
 */
abstract class Default_Model_Base_Coupon extends Default_Model_Base_Abstract
{
    public function setTableDefinition()
    {
        $this->setTableName('coupon');
        $this->hasColumn('id', 'integer', 11, array(
             'type' => 'integer',
             'primary' => true,
             'unsigned' => true,
             'autoincrement' => true,
             'length' => '11',
             ));
        $this->hasColumn('code', 'string', 255, array(
             'type' => 'string',
             'unique' => true,
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('value', 'decimal', 10, array(
             'type' => 'decimal',
             'scale' => '2',
             'notnull' => true,
             'length' => '10',
             ));
        $this->hasColumn('is_used', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('entity_user_id', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '11',
             ));
        $this->hasColumn('end_of_validity', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => true,
             ));
        $this->hasColumn('original_value', 'decimal', 10, array(
             'type' => 'decimal',
             'scale' => '2',
             'notnull' => true,
             'length' => '10',
             ));
        $this->hasColumn('customer_email', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('customer_phone', 'string', 70, array(
             'type' => 'string',
             'length' => '70',
             ));
        $this->hasColumn('customer_firstname', 'string', 150, array(
             'type' => 'string',
             'length' => '150',
             ));
        $this->hasColumn('customer_lastname', 'string', 150, array(
             'type' => 'string',
             'length' => '150',
             ));
        $this->hasColumn('customer_street', 'string', 180, array(
             'type' => 'string',
             'length' => '180',
             ));
        $this->hasColumn('customer_street_number', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('customer_zip', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('customer_city', 'string', 180, array(
             'type' => 'string',
             'length' => '180',
             ));
        $this->hasColumn('customer_country', 'string', 180, array(
             'type' => 'string',
             'length' => '180',
             ));


        $this->index('user_id', array(
             'fields' => 
             array(
              0 => 'entity_user_id',
             ),
             ));
        $this->option('collate', 'utf8_bin');
        $this->option('charset', 'utf8');
        $this->option('type', 'InnoDB');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Default_Model_EntityUser as EntityUser', array(
             'local' => 'entity_user_id',
             'foreign' => 'id'));

        $this->hasMany('Default_Model_ProductOrder as ProductOrder', array(
             'local' => 'id',
             'foreign' => 'coupon_id'));

        $this->hasMany('Default_Model_CouponHistory as CouponHistory', array(
             'local' => 'id',
             'foreign' => 'coupon_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $softdelete0 = new Doctrine_Template_SoftDelete();
        $this->actAs($timestampable0);
        $this->actAs($softdelete0);
    }
}