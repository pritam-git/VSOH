<?php

/**
 * Default_Model_Base_Media
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $short
 * @property string $file_name
 * @property integer $entity_id
 * @property integer $role_id
 * @property integer $media_type_id
 * @property integer $media_folder_id
 * @property integer $file_size
 * @property string $mime_type
 * @property integer $channels
 * @property integer $width
 * @property integer $height
 * @property string $author
 * @property string $copyright
 * @property decimal $latitude
 * @property decimal $longitude
 * @property string $name
 * @property string $keywords
 * @property clob $description
 * @property integer $media_image_id
 * @property Default_Model_MediaFolder $MediaFolder
 * @property Default_Model_MediaType $MediaType
 * @property Default_Model_Role $Role
 * @property Default_Model_Entity $Entity
 * @property Doctrine_Collection $Product
 * @property Doctrine_Collection $ProductOrderItem
 * @property Doctrine_Collection $Flyer
 * @property Doctrine_Collection $Newsletter
 * @property Doctrine_Collection $News
 * @property Doctrine_Collection $MediaConfig
 * @property Doctrine_Collection $Protocol
 * @property Doctrine_Collection $Dates
 * @property Doctrine_Collection $Otc
 * @property Doctrine_Collection $Assembly
 * @property Doctrine_Collection $RegionDates
 * @property Doctrine_Collection $AssemblyM2nMediaImage
 * @property Doctrine_Collection $DatesM2nMediaImage
 * @property Doctrine_Collection $NewsM2nMediaImage
 * @property Doctrine_Collection $OtcM2nMediaImage
 * @property Doctrine_Collection $ProtocolM2nMediaImage
 * @property Doctrine_Collection $RegionDatesM2nMediaImage
 * @property Doctrine_Collection $MediaImageEdit
 * 
 * @package    L8M
 * @subpackage Models (Default Module)
 * @author     Norbert Marks <nm@l8m.com>
 * @version    SVN: $Id: Builder.php 7 2014-03-11 16:18:40Z nm $
 */
abstract class Default_Model_Base_Media extends Default_Model_Base_Abstract
{
    public function setTableDefinition()
    {
        $this->setTableName('media');
        $this->hasColumn('id', 'integer', 11, array(
             'type' => 'integer',
             'primary' => true,
             'unsigned' => true,
             'autoincrement' => true,
             'length' => '11',
             ));
        $this->hasColumn('short', 'string', 255, array(
             'type' => 'string',
             'unique' => true,
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('file_name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('entity_id', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'length' => '11',
             ));
        $this->hasColumn('role_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'length' => '4',
             ));
        $this->hasColumn('media_type_id', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'length' => '11',
             ));
        $this->hasColumn('media_folder_id', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '11',
             ));
        $this->hasColumn('file_size', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'length' => '11',
             ));
        $this->hasColumn('mime_type', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('channels', 'integer', 2, array(
             'type' => 'integer',
             'length' => '2',
             ));
        $this->hasColumn('width', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '11',
             ));
        $this->hasColumn('height', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '11',
             ));
        $this->hasColumn('author', 'string', 120, array(
             'type' => 'string',
             'length' => '120',
             ));
        $this->hasColumn('copyright', 'string', 120, array(
             'type' => 'string',
             'length' => '120',
             ));
        $this->hasColumn('latitude', 'decimal', 15, array(
             'type' => 'decimal',
             'scale' => '10',
             'length' => '15',
             ));
        $this->hasColumn('longitude', 'decimal', 15, array(
             'type' => 'decimal',
             'scale' => '10',
             'length' => '15',
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('keywords', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('description', 'clob', 65535, array(
             'type' => 'clob',
             'length' => '65535',
             ));
        $this->hasColumn('media_image_id', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '11',
             ));


        $this->index('media_folder_id_idx', array(
             'fields' => 
             array(
              0 => 'media_folder_id',
             ),
             ));
        $this->index('media_type_id_idx', array(
             'fields' => 
             array(
              0 => 'media_type_id',
             ),
             ));
        $this->index('role_id_idx', array(
             'fields' => 
             array(
              0 => 'role_id',
             ),
             ));
        $this->index('entity_id_idx', array(
             'fields' => 
             array(
              0 => 'entity_id',
             ),
             ));
        $this->index('width', array(
             'fields' => 
             array(
              0 => 'width',
             ),
             ));
        $this->index('height', array(
             'fields' => 
             array(
              0 => 'height',
             ),
             ));
        $this->index('media_image_id', array(
             'fields' => 
             array(
              0 => 'media_image_id',
             ),
             ));
        $this->option('collate', 'utf8_bin');
        $this->option('charset', 'utf8');
        $this->option('type', 'InnoDB');

        $this->setSubClasses(array(
             'Default_Model_MediaImageInstance' => 
             array(
              'media_type_id' => 3,
             ),
             'Default_Model_MediaImage' => 
             array(
              'media_type_id' => 2,
             ),
             'Default_Model_MediaShockwave' => 
             array(
              'media_type_id' => 4,
             ),
             'Default_Model_MediaFile' => 
             array(
              'media_type_id' => 1,
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Default_Model_MediaFolder as MediaFolder', array(
             'local' => 'media_folder_id',
             'foreign' => 'id'));

        $this->hasOne('Default_Model_MediaType as MediaType', array(
             'local' => 'media_type_id',
             'foreign' => 'id'));

        $this->hasOne('Default_Model_Role as Role', array(
             'local' => 'role_id',
             'foreign' => 'id'));

        $this->hasOne('Default_Model_Entity as Entity', array(
             'local' => 'entity_id',
             'foreign' => 'id'));

        $this->hasMany('Default_Model_Product as Product', array(
             'local' => 'id',
             'foreign' => 'media_id'));

        $this->hasMany('Default_Model_ProductOrderItem as ProductOrderItem', array(
             'local' => 'id',
             'foreign' => 'media_id'));

        $this->hasMany('Default_Model_Flyer as Flyer', array(
             'local' => 'id',
             'foreign' => 'media_id'));

        $this->hasMany('Default_Model_Newsletter as Newsletter', array(
             'local' => 'id',
             'foreign' => 'media_id'));

        $this->hasMany('Default_Model_News as News', array(
             'local' => 'id',
             'foreign' => 'fr_media_id'));

        $this->hasMany('Default_Model_MediaConfig as MediaConfig', array(
             'local' => 'id',
             'foreign' => 'media_id'));

        $this->hasMany('Default_Model_Protocol as Protocol', array(
             'local' => 'id',
             'foreign' => 'fr_media_id'));

        $this->hasMany('Default_Model_Dates as Dates', array(
             'local' => 'id',
             'foreign' => 'fr_media_id'));

        $this->hasMany('Default_Model_Otc as Otc', array(
             'local' => 'id',
             'foreign' => 'fr_media_id'));

        $this->hasMany('Default_Model_Assembly as Assembly', array(
             'local' => 'id',
             'foreign' => 'fr_media_id'));

        $this->hasMany('Default_Model_RegionDates as RegionDates', array(
             'local' => 'id',
             'foreign' => 'fr_media_id'));

        $this->hasMany('Default_Model_AssemblyM2nMediaImage as AssemblyM2nMediaImage', array(
             'local' => 'id',
             'foreign' => 'media_image_id'));

        $this->hasMany('Default_Model_DatesM2nMediaImage as DatesM2nMediaImage', array(
             'local' => 'id',
             'foreign' => 'media_image_id'));

        $this->hasMany('Default_Model_NewsM2nMediaImage as NewsM2nMediaImage', array(
             'local' => 'id',
             'foreign' => 'media_image_id'));

        $this->hasMany('Default_Model_OtcM2nMediaImage as OtcM2nMediaImage', array(
             'local' => 'id',
             'foreign' => 'media_image_id'));

        $this->hasMany('Default_Model_ProtocolM2nMediaImage as ProtocolM2nMediaImage', array(
             'local' => 'id',
             'foreign' => 'media_image_id'));

        $this->hasMany('Default_Model_RegionDatesM2nMediaImage as RegionDatesM2nMediaImage', array(
             'local' => 'id',
             'foreign' => 'media_image_id'));

        $this->hasMany('Default_Model_MediaImageEdit as MediaImageEdit', array(
             'local' => 'id',
             'foreign' => 'original_image_id'));

        $i18n0 = new Doctrine_Template_I18n(array(
             'tableName' => 'media_translation',
             'fields' => 
             array(
              0 => 'name',
              1 => 'keywords',
              2 => 'description',
             ),
             ));
        $timestampable1 = new Doctrine_Template_Timestampable();
        $i18n0->addChild($timestampable1);
        $softdelete1 = new Doctrine_Template_SoftDelete();
        $i18n0->addChild($softdelete1);
        $timestampable0 = new Doctrine_Template_Timestampable();
        $softdelete0 = new Doctrine_Template_SoftDelete();
        $this->actAs($i18n0);
        $this->actAs($timestampable0);
        $this->actAs($softdelete0);
    }
}