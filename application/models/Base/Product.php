<?php

/**
 * Default_Model_Base_Product
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $short
 * @property integer $media_image_id
 * @property integer $media_id
 * @property integer $product_unit_id
 * @property integer $taxes_id
 * @property integer $refund_id
 * @property integer $producer_id
 * @property string $product_number
 * @property decimal $price
 * @property integer $unit_count
 * @property integer $shipping_cost_factor
 * @property boolean $top_product
 * @property boolean $sold_out
 * @property boolean $hidden
 * @property boolean $new
 * @property boolean $tip
 * @property integer $product_status_id
 * @property boolean $need_media_upload
 * @property integer $delivery_days
 * @property integer $in_stock
 * @property boolean $no_stock_change
 * @property string $ushort
 * @property string $name
 * @property string $title
 * @property string $subtitle
 * @property clob $description
 * @property clob $material
 * @property string $meta_title
 * @property string $meta_description
 * @property string $meta_keywords
 * @property Default_Model_MediaImage $MediaImage
 * @property Default_Model_ProductUnit $ProductUnit
 * @property Default_Model_Taxes $Taxes
 * @property Default_Model_Refund $Refund
 * @property Default_Model_Producer $Producer
 * @property Default_Model_Media $Media
 * @property Default_Model_ProductStatus $ProductStatus
 * @property Doctrine_Collection $ProductM2nMediaImage
 * @property Doctrine_Collection $TemporaryOffer
 * @property Doctrine_Collection $ProductM2nTag
 * @property Doctrine_Collection $CrossSell
 * @property Doctrine_Collection $ProductM2nProductGroup
 * @property Doctrine_Collection $ProductM2nProductOptionModel
 * @property Doctrine_Collection $ProductRating
 * @property Doctrine_Collection $ProductsOptions
 * 
 * @package    L8M
 * @subpackage Models (Default Module)
 * @author     Norbert Marks <nm@l8m.com>
 * @version    SVN: $Id: Builder.php 7 2014-03-11 16:18:40Z nm $
 */
abstract class Default_Model_Base_Product extends Default_Model_Base_Abstract
{
    public function setTableDefinition()
    {
        $this->setTableName('product');
        $this->hasColumn('id', 'integer', 11, array(
             'type' => 'integer',
             'primary' => true,
             'unsigned' => true,
             'autoincrement' => true,
             'length' => '11',
             ));
        $this->hasColumn('short', 'string', 255, array(
             'type' => 'string',
             'unique' => true,
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('media_image_id', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '11',
             ));
        $this->hasColumn('media_id', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '11',
             ));
        $this->hasColumn('product_unit_id', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '11',
             ));
        $this->hasColumn('taxes_id', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'length' => '11',
             ));
        $this->hasColumn('refund_id', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '11',
             ));
        $this->hasColumn('producer_id', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '11',
             ));
        $this->hasColumn('product_number', 'string', 25, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '25',
             ));
        $this->hasColumn('price', 'decimal', 10, array(
             'type' => 'decimal',
             'scale' => '2',
             'length' => '10',
             ));
        $this->hasColumn('unit_count', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '11',
             ));
        $this->hasColumn('shipping_cost_factor', 'integer', 11, array(
             'type' => 'integer',
             'length' => '11',
             ));
        $this->hasColumn('top_product', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('sold_out', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('hidden', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('new', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('tip', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('product_status_id', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '11',
             ));
        $this->hasColumn('need_media_upload', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('delivery_days', 'integer', 11, array(
             'type' => 'integer',
             'default' => 0,
             'unsigned' => true,
             'notnull' => true,
             'length' => '11',
             ));
        $this->hasColumn('in_stock', 'integer', 11, array(
             'type' => 'integer',
             'default' => 0,
             'length' => '11',
             ));
        $this->hasColumn('no_stock_change', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('ushort', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('title', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('subtitle', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('description', 'clob', 65535, array(
             'type' => 'clob',
             'length' => '65535',
             ));
        $this->hasColumn('material', 'clob', 65535, array(
             'type' => 'clob',
             'notnull' => true,
             'length' => '65535',
             ));
        $this->hasColumn('meta_title', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('meta_description', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('meta_keywords', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));


        $this->index('media_image_id', array(
             'fields' => 
             array(
              0 => 'media_image_id',
             ),
             ));
        $this->index('product_unit_id', array(
             'fields' => 
             array(
              0 => 'product_unit_id',
             ),
             ));
        $this->index('taxes_id', array(
             'fields' => 
             array(
              0 => 'taxes_id',
             ),
             ));
        $this->index('refund_id', array(
             'fields' => 
             array(
              0 => 'refund_id',
             ),
             ));
        $this->index('producer_id', array(
             'fields' => 
             array(
              0 => 'producer_id',
             ),
             ));
        $this->index('media_id_idx', array(
             'fields' => 
             array(
              0 => 'media_id',
             ),
             ));
        $this->index('product_status_id_idx', array(
             'fields' => 
             array(
              0 => 'product_status_id',
             ),
             ));
        $this->option('collate', 'utf8_bin');
        $this->option('charset', 'utf8');
        $this->option('type', 'InnoDB');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Default_Model_MediaImage as MediaImage', array(
             'local' => 'media_image_id',
             'foreign' => 'id'));

        $this->hasOne('Default_Model_ProductUnit as ProductUnit', array(
             'local' => 'product_unit_id',
             'foreign' => 'id'));

        $this->hasOne('Default_Model_Taxes as Taxes', array(
             'local' => 'taxes_id',
             'foreign' => 'id'));

        $this->hasOne('Default_Model_Refund as Refund', array(
             'local' => 'refund_id',
             'foreign' => 'id'));

        $this->hasOne('Default_Model_Producer as Producer', array(
             'local' => 'producer_id',
             'foreign' => 'id'));

        $this->hasOne('Default_Model_Media as Media', array(
             'local' => 'media_id',
             'foreign' => 'id'));

        $this->hasOne('Default_Model_ProductStatus as ProductStatus', array(
             'local' => 'product_status_id',
             'foreign' => 'id'));

        $this->hasMany('Default_Model_ProductM2nMediaImage as ProductM2nMediaImage', array(
             'local' => 'id',
             'foreign' => 'product_id'));

        $this->hasMany('Default_Model_TemporaryOffer as TemporaryOffer', array(
             'local' => 'id',
             'foreign' => 'product_id'));

        $this->hasMany('Default_Model_ProductM2nTag as ProductM2nTag', array(
             'local' => 'id',
             'foreign' => 'product_id'));

        $this->hasMany('Default_Model_CrossSell as CrossSell', array(
             'local' => 'id',
             'foreign' => 'product1_id'));

        $this->hasMany('Default_Model_ProductM2nProductGroup as ProductM2nProductGroup', array(
             'local' => 'id',
             'foreign' => 'product_id'));

        $this->hasMany('Default_Model_ProductM2nProductOptionModel as ProductM2nProductOptionModel', array(
             'local' => 'id',
             'foreign' => 'product_id'));

        $this->hasMany('Default_Model_ProductRating as ProductRating', array(
             'local' => 'id',
             'foreign' => 'product_id'));

        $this->hasMany('Default_Model_ProductsOptions as ProductsOptions', array(
             'local' => 'id',
             'foreign' => 'product_id'));

        $i18n0 = new Doctrine_Template_I18n(array(
             'tableName' => 'product_translation',
             'fields' => 
             array(
              0 => 'ushort',
              1 => 'name',
              2 => 'title',
              3 => 'subtitle',
              4 => 'description',
              5 => 'material',
              6 => 'meta_title',
              7 => 'meta_description',
              8 => 'meta_keywords',
             ),
             ));
        $timestampable1 = new Doctrine_Template_Timestampable();
        $i18n0->addChild($timestampable1);
        $softdelete1 = new Doctrine_Template_SoftDelete();
        $i18n0->addChild($softdelete1);
        $timestampable0 = new Doctrine_Template_Timestampable();
        $softdelete0 = new Doctrine_Template_SoftDelete();
        $this->actAs($i18n0);
        $this->actAs($timestampable0);
        $this->actAs($softdelete0);
    }
}