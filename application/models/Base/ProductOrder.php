<?php

/**
 * Default_Model_Base_ProductOrder
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $entity_user_id
 * @property string $company
 * @property string $firstname
 * @property string $lastname
 * @property string $billing_number
 * @property decimal $sum_price
 * @property decimal $shipping_costs
 * @property decimal $payment_costs
 * @property string $billing_street
 * @property string $billing_street_number
 * @property string $billing_address_line_1
 * @property string $billing_address_line_2
 * @property string $billing_zip
 * @property string $billing_city
 * @property integer $billing_country_id
 * @property string $email
 * @property string $phone
 * @property string $mobile
 * @property clob $comment
 * @property integer $payment_service_id
 * @property boolean $state_wait_for_payment
 * @property boolean $state_dispose
 * @property boolean $state_shipped
 * @property string $delivery_company
 * @property string $delivery_firstname
 * @property string $delivery_lastname
 * @property string $delivery_street
 * @property string $delivery_street_number
 * @property string $delivery_address_line_1
 * @property string $delivery_address_line_2
 * @property string $delivery_zip
 * @property string $delivery_city
 * @property integer $delivery_country_id
 * @property string $bank_account_name
 * @property string $bank_account_number
 * @property string $bank_account_iban
 * @property string $bank_account_bic
 * @property string $bank_identification_code
 * @property string $bank_name
 * @property string $card_number
 * @property string $valid_to
 * @property string $verification_code
 * @property integer $coupon_id
 * @property clob $note
 * @property clob $intern_comment
 * @property boolean $cancelled
 * @property boolean $order_mail_send
 * @property string $ship_mail_send
 * @property Default_Model_EntityUser $EntityUser
 * @property Default_Model_Country $BillingCountry
 * @property Default_Model_Country $DeliveryCountry
 * @property Default_Model_Coupon $Coupon
 * @property Default_Model_PaymentService $PaymentService
 * @property Doctrine_Collection $ProductOrderItem
 * @property Doctrine_Collection $CouponHistory
 * @property Doctrine_Collection $Address
 * 
 * @package    L8M
 * @subpackage Models (Default Module)
 * @author     Norbert Marks <nm@l8m.com>
 * @version    SVN: $Id: Builder.php 7 2014-03-11 16:18:40Z nm $
 */
abstract class Default_Model_Base_ProductOrder extends Default_Model_Base_Abstract
{
    public function setTableDefinition()
    {
        $this->setTableName('product_order');
        $this->hasColumn('id', 'integer', 11, array(
             'type' => 'integer',
             'primary' => true,
             'unsigned' => true,
             'autoincrement' => true,
             'length' => '11',
             ));
        $this->hasColumn('entity_user_id', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '11',
             ));
        $this->hasColumn('company', 'string', 120, array(
             'type' => 'string',
             'length' => '120',
             ));
        $this->hasColumn('firstname', 'string', 80, array(
             'type' => 'string',
             'length' => '80',
             ));
        $this->hasColumn('lastname', 'string', 80, array(
             'type' => 'string',
             'length' => '80',
             ));
        $this->hasColumn('billing_number', 'string', 120, array(
             'type' => 'string',
             'length' => '120',
             ));
        $this->hasColumn('sum_price', 'decimal', 7, array(
             'type' => 'decimal',
             'scale' => '2',
             'length' => '7',
             ));
        $this->hasColumn('shipping_costs', 'decimal', 7, array(
             'type' => 'decimal',
             'scale' => '2',
             'length' => '7',
             ));
        $this->hasColumn('payment_costs', 'decimal', 7, array(
             'type' => 'decimal',
             'scale' => '2',
             'length' => '7',
             ));
        $this->hasColumn('billing_street', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('billing_street_number', 'string', 8, array(
             'type' => 'string',
             'length' => '8',
             ));
        $this->hasColumn('billing_address_line_1', 'string', 80, array(
             'type' => 'string',
             'length' => '80',
             ));
        $this->hasColumn('billing_address_line_2', 'string', 80, array(
             'type' => 'string',
             'length' => '80',
             ));
        $this->hasColumn('billing_zip', 'string', 16, array(
             'type' => 'string',
             'length' => '16',
             ));
        $this->hasColumn('billing_city', 'string', 80, array(
             'type' => 'string',
             'length' => '80',
             ));
        $this->hasColumn('billing_country_id', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '11',
             ));
        $this->hasColumn('email', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('phone', 'string', 80, array(
             'type' => 'string',
             'length' => '80',
             ));
        $this->hasColumn('mobile', 'string', 80, array(
             'type' => 'string',
             'length' => '80',
             ));
        $this->hasColumn('comment', 'clob', 65535, array(
             'type' => 'clob',
             'length' => '65535',
             ));
        $this->hasColumn('payment_service_id', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '11',
             ));
        $this->hasColumn('state_wait_for_payment', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('state_dispose', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('state_shipped', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('delivery_company', 'string', 120, array(
             'type' => 'string',
             'length' => '120',
             ));
        $this->hasColumn('delivery_firstname', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('delivery_lastname', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('delivery_street', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('delivery_street_number', 'string', 8, array(
             'type' => 'string',
             'length' => '8',
             ));
        $this->hasColumn('delivery_address_line_1', 'string', 80, array(
             'type' => 'string',
             'length' => '80',
             ));
        $this->hasColumn('delivery_address_line_2', 'string', 80, array(
             'type' => 'string',
             'length' => '80',
             ));
        $this->hasColumn('delivery_zip', 'string', 16, array(
             'type' => 'string',
             'length' => '16',
             ));
        $this->hasColumn('delivery_city', 'string', 80, array(
             'type' => 'string',
             'length' => '80',
             ));
        $this->hasColumn('delivery_country_id', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '11',
             ));
        $this->hasColumn('bank_account_name', 'string', 80, array(
             'type' => 'string',
             'length' => '80',
             ));
        $this->hasColumn('bank_account_number', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('bank_account_iban', 'string', 120, array(
             'type' => 'string',
             'length' => '120',
             ));
        $this->hasColumn('bank_account_bic', 'string', 120, array(
             'type' => 'string',
             'length' => '120',
             ));
        $this->hasColumn('bank_identification_code', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('bank_name', 'string', 80, array(
             'type' => 'string',
             'length' => '80',
             ));
        $this->hasColumn('card_number', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('valid_to', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('verification_code', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('coupon_id', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '11',
             ));
        $this->hasColumn('note', 'clob', 65535, array(
             'type' => 'clob',
             'length' => '65535',
             ));
        $this->hasColumn('intern_comment', 'clob', 65535, array(
             'type' => 'clob',
             'length' => '65535',
             ));
        $this->hasColumn('cancelled', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('order_mail_send', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('ship_mail_send', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));


        $this->index('coupon_id_idx', array(
             'fields' => 
             array(
              0 => 'coupon_id',
             ),
             ));
        $this->index('delivery_country_id_idx', array(
             'fields' => 
             array(
              0 => 'delivery_country_id',
             ),
             ));
        $this->index('billing_country_id_idx', array(
             'fields' => 
             array(
              0 => 'billing_country_id',
             ),
             ));
        $this->index('payment_service_id_idx', array(
             'fields' => 
             array(
              0 => 'payment_service_id',
             ),
             ));
        $this->index('entity_user_id_idx', array(
             'fields' => 
             array(
              0 => 'entity_user_id',
             ),
             ));
        $this->option('collate', 'utf8_bin');
        $this->option('charset', 'utf8');
        $this->option('type', 'InnoDB');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Default_Model_EntityUser as EntityUser', array(
             'local' => 'entity_user_id',
             'foreign' => 'id'));

        $this->hasOne('Default_Model_Country as BillingCountry', array(
             'local' => 'billing_country_id',
             'foreign' => 'id'));

        $this->hasOne('Default_Model_Country as DeliveryCountry', array(
             'local' => 'delivery_country_id',
             'foreign' => 'id'));

        $this->hasOne('Default_Model_Coupon as Coupon', array(
             'local' => 'coupon_id',
             'foreign' => 'id'));

        $this->hasOne('Default_Model_PaymentService as PaymentService', array(
             'local' => 'payment_service_id',
             'foreign' => 'id'));

        $this->hasMany('Default_Model_ProductOrderItem as ProductOrderItem', array(
             'local' => 'id',
             'foreign' => 'product_order_id'));

        $this->hasMany('Default_Model_CouponHistory as CouponHistory', array(
             'local' => 'id',
             'foreign' => 'product_order_id'));

        $this->hasMany('Default_Model_Address as Address', array(
             'local' => 'id',
             'foreign' => 'product_order_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $softdelete0 = new Doctrine_Template_SoftDelete();
        $this->actAs($timestampable0);
        $this->actAs($softdelete0);
    }
}