<?php

/**
 * Default_Model_Base_Action
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property string $resource
 * @property integer $controller_id
 * @property integer $role_id
 * @property boolean $is_allowed
 * @property boolean $is_action_method
 * @property boolean $is_html_view
 * @property boolean $is_ajax_view
 * @property boolean $is_json_view
 * @property string $layout
 * @property string $content_partial
 * @property string $canonical_lang
 * @property string $robots
 * @property string $title
 * @property string $headline
 * @property string $subheadline
 * @property string $keywords
 * @property clob $description
 * @property clob $content
 * @property Default_Model_Controller $Controller
 * @property Default_Model_Role $Role
 * @property Doctrine_Collection $BackendAdminBoxesAction
 * @property Doctrine_Collection $BackgroundImage
 * @property Doctrine_Collection $MediaImageM2nAction
 * @property Doctrine_Collection $ContentBox
 * @property Doctrine_Collection $Navigation
 * 
 * @package    L8M
 * @subpackage Models (Default Module)
 * @author     Norbert Marks <nm@l8m.com>
 * @version    SVN: $Id: Builder.php 7 2014-03-11 16:18:40Z nm $
 */
abstract class Default_Model_Base_Action extends Default_Model_Base_Abstract
{
    public function setTableDefinition()
    {
        $this->setTableName('action');
        $this->hasColumn('id', 'integer', 11, array(
             'type' => 'integer',
             'primary' => true,
             'unsigned' => true,
             'autoincrement' => true,
             'length' => '11',
             ));
        $this->hasColumn('name', 'string', 120, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '120',
             ));
        $this->hasColumn('resource', 'string', 255, array(
             'type' => 'string',
             'unique' => true,
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('controller_id', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'length' => '11',
             ));
        $this->hasColumn('role_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'length' => '4',
             ));
        $this->hasColumn('is_allowed', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('is_action_method', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('is_html_view', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('is_ajax_view', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('is_json_view', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('layout', 'string', 120, array(
             'type' => 'string',
             'length' => '120',
             ));
        $this->hasColumn('content_partial', 'string', 120, array(
             'type' => 'string',
             'length' => '120',
             ));
        $this->hasColumn('canonical_lang', 'string', 2, array(
             'type' => 'string',
             'length' => '2',
             ));
        $this->hasColumn('robots', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('title', 'string', 120, array(
             'type' => 'string',
             'length' => '120',
             ));
        $this->hasColumn('headline', 'string', 120, array(
             'type' => 'string',
             'length' => '120',
             ));
        $this->hasColumn('subheadline', 'string', 120, array(
             'type' => 'string',
             'length' => '120',
             ));
        $this->hasColumn('keywords', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('description', 'clob', 65535, array(
             'type' => 'clob',
             'length' => '65535',
             ));
        $this->hasColumn('content', 'clob', 65535, array(
             'type' => 'clob',
             'length' => '65535',
             ));


        $this->index('controller_id_idx', array(
             'fields' => 
             array(
              0 => 'controller_id',
             ),
             ));
        $this->index('name_idx', array(
             'fields' => 
             array(
              0 => 'name',
             ),
             ));
        $this->index('role_id_idx', array(
             'fields' => 
             array(
              0 => 'role_id',
             ),
             ));
        $this->option('collate', 'utf8_bin');
        $this->option('charset', 'utf8');
        $this->option('type', 'InnoDB');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Default_Model_Controller as Controller', array(
             'local' => 'controller_id',
             'foreign' => 'id'));

        $this->hasOne('Default_Model_Role as Role', array(
             'local' => 'role_id',
             'foreign' => 'id'));

        $this->hasMany('Default_Model_BackendAdminBoxesAction as BackendAdminBoxesAction', array(
             'local' => 'id',
             'foreign' => 'action_id'));

        $this->hasMany('Default_Model_BackgroundImage as BackgroundImage', array(
             'local' => 'id',
             'foreign' => 'action_id'));

        $this->hasMany('Default_Model_MediaImageM2nAction as MediaImageM2nAction', array(
             'local' => 'id',
             'foreign' => 'action_id'));

        $this->hasMany('Default_Model_ContentBox as ContentBox', array(
             'local' => 'id',
             'foreign' => 'action_id'));

        $this->hasMany('Default_Model_Navigation as Navigation', array(
             'local' => 'resource',
             'foreign' => 'action_resource'));

        $i18n0 = new Doctrine_Template_I18n(array(
             'tableName' => 'action_translation',
             'fields' => 
             array(
              0 => 'title',
              1 => 'headline',
              2 => 'subheadline',
              3 => 'keywords',
              4 => 'description',
              5 => 'content',
             ),
             ));
        $timestampable1 = new Doctrine_Template_Timestampable();
        $i18n0->addChild($timestampable1);
        $softdelete1 = new Doctrine_Template_SoftDelete();
        $i18n0->addChild($softdelete1);
        $timestampable0 = new Doctrine_Template_Timestampable();
        $softdelete0 = new Doctrine_Template_SoftDelete();
        $this->actAs($i18n0);
        $this->actAs($timestampable0);
        $this->actAs($softdelete0);
    }
}