<?php

/**
 * Default_Model_Base_Protocol
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $short
 * @property string $name
 * @property integer $commission_id
 * @property datetime $publish_datetime
 * @property integer $fr_media_id
 * @property integer $de_media_id
 * @property integer $fr_presentation_media_id
 * @property integer $de_presentation_media_id
 * @property integer $media_image_id
 * @property boolean $published
 * @property string $title
 * @property string $description
 * @property clob $content
 * @property Default_Model_Commission $Commission
 * @property Default_Model_Media $FrMedia
 * @property Default_Model_Media $DeMedia
 * @property Default_Model_Media $FrPresentationMedia
 * @property Default_Model_Media $DePresentationMedia
 * @property Default_Model_Media $MediaImage
 * @property Doctrine_Collection $ProtocolM2nDepartment
 * @property Doctrine_Collection $ProtocolM2nRegion
 * @property Doctrine_Collection $ProtocolM2nContractType
 * @property Doctrine_Collection $ProtocolM2nBrand
 * @property Doctrine_Collection $ProtocolM2nMediaImage
 * 
 * @package    L8M
 * @subpackage Models (Default Module)
 * @author     Norbert Marks <nm@l8m.com>
 * @version    SVN: $Id: Builder.php 7 2014-03-11 16:18:40Z nm $
 */
abstract class Default_Model_Base_Protocol extends Default_Model_Base_Abstract
{
    public function setTableDefinition()
    {
        $this->setTableName('protocol');
        $this->hasColumn('id', 'integer', 11, array(
             'type' => 'integer',
             'primary' => true,
             'unsigned' => true,
             'autoincrement' => true,
             'length' => '11',
             ));
        $this->hasColumn('short', 'string', 45, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '45',
             ));
        $this->hasColumn('name', 'string', 45, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '45',
             ));
        $this->hasColumn('commission_id', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'length' => '11',
             ));
        $this->hasColumn('publish_datetime', 'datetime', null, array(
             'type' => 'datetime',
             ));
        $this->hasColumn('fr_media_id', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '11',
             ));
        $this->hasColumn('de_media_id', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '11',
             ));
        $this->hasColumn('fr_presentation_media_id', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '11',
             ));
        $this->hasColumn('de_presentation_media_id', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '11',
             ));
        $this->hasColumn('media_image_id', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '11',
             ));
        $this->hasColumn('published', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('title', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('description', 'string', 120, array(
             'type' => 'string',
             'length' => '120',
             ));
        $this->hasColumn('content', 'clob', 65535, array(
             'type' => 'clob',
             'length' => '65535',
             ));


        $this->index('commission_id_idx', array(
             'fields' => 
             array(
              0 => 'commission_id',
             ),
             ));
        $this->index('fr_media_id_idx', array(
             'fields' => 
             array(
              0 => 'fr_media_id',
             ),
             ));
        $this->index('de_media_id_idx', array(
             'fields' => 
             array(
              0 => 'de_media_id',
             ),
             ));
        $this->index('fr_presentation_media_id_idx', array(
             'fields' => 
             array(
              0 => 'fr_presentation_media_id',
             ),
             ));
        $this->index('de_presentation_media_id_idx', array(
             'fields' => 
             array(
              0 => 'de_presentation_media_id',
             ),
             ));
        $this->index('media_image_id_idx', array(
             'fields' => 
             array(
              0 => 'media_image_id',
             ),
             ));
        $this->option('collate', 'utf8_bin');
        $this->option('charset', 'utf8');
        $this->option('type', 'InnoDB');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Default_Model_Commission as Commission', array(
             'local' => 'commission_id',
             'foreign' => 'id'));

        $this->hasOne('Default_Model_Media as FrMedia', array(
             'local' => 'fr_media_id',
             'foreign' => 'id'));

        $this->hasOne('Default_Model_Media as DeMedia', array(
             'local' => 'de_media_id',
             'foreign' => 'id'));

        $this->hasOne('Default_Model_Media as FrPresentationMedia', array(
             'local' => 'fr_presentation_media_id',
             'foreign' => 'id'));

        $this->hasOne('Default_Model_Media as DePresentationMedia', array(
             'local' => 'de_presentation_media_id',
             'foreign' => 'id'));

        $this->hasOne('Default_Model_Media as MediaImage', array(
             'local' => 'media_image_id',
             'foreign' => 'id'));

        $this->hasMany('Default_Model_ProtocolM2nDepartment as ProtocolM2nDepartment', array(
             'local' => 'id',
             'foreign' => 'protocol_id'));

        $this->hasMany('Default_Model_ProtocolM2nRegion as ProtocolM2nRegion', array(
             'local' => 'id',
             'foreign' => 'protocol_id'));

        $this->hasMany('Default_Model_ProtocolM2nContractType as ProtocolM2nContractType', array(
             'local' => 'id',
             'foreign' => 'protocol_id'));

        $this->hasMany('Default_Model_ProtocolM2nBrand as ProtocolM2nBrand', array(
             'local' => 'id',
             'foreign' => 'protocol_id'));

        $this->hasMany('Default_Model_ProtocolM2nMediaImage as ProtocolM2nMediaImage', array(
             'local' => 'id',
             'foreign' => 'protocol_id'));
       
        $i18n0 = new Doctrine_Template_I18n(array(
             'tableName' => 'protocol_translation',
             'fields' => 
             array(
              0 => 'title',
              1 => 'description',
              2 => 'content',
             ),
             ));
        $timestampable1 = new Doctrine_Template_Timestampable();
        $i18n0->addChild($timestampable1);
        $softdelete1 = new Doctrine_Template_SoftDelete();
        $i18n0->addChild($softdelete1);
        $timestampable0 = new Doctrine_Template_Timestampable();
        $softdelete0 = new Doctrine_Template_SoftDelete();
        $this->actAs($i18n0);
        $this->actAs($timestampable0);
        $this->actAs($softdelete0);
    }
}