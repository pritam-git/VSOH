<?php

/**
 * Default_Model_Base_ProductOrderItem
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $product_order_id
 * @property decimal $price
 * @property integer $quantity
 * @property integer $taxes_rate
 * @property clob $name
 * @property clob $product_unit_short
 * @property string $product_short
 * @property decimal $refund_value
 * @property string $product_number
 * @property integer $media_image_id
 * @property integer $media_id
 * @property date $delivery_date
 * @property Default_Model_ProductOrder $ProductOrder
 * @property Default_Model_MediaImage $MediaImage
 * @property Default_Model_Media $Media
 * @property Doctrine_Collection $ProductOrderItemUnits
 * 
 * @package    L8M
 * @subpackage Models (Default Module)
 * @author     Norbert Marks <nm@l8m.com>
 * @version    SVN: $Id: Builder.php 7 2014-03-11 16:18:40Z nm $
 */
abstract class Default_Model_Base_ProductOrderItem extends Default_Model_Base_Abstract
{
    public function setTableDefinition()
    {
        $this->setTableName('product_order_item');
        $this->hasColumn('id', 'integer', 11, array(
             'type' => 'integer',
             'primary' => true,
             'unsigned' => true,
             'autoincrement' => true,
             'length' => '11',
             ));
        $this->hasColumn('product_order_id', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'length' => '11',
             ));
        $this->hasColumn('price', 'decimal', 7, array(
             'type' => 'decimal',
             'scale' => '2',
             'length' => '7',
             ));
        $this->hasColumn('quantity', 'integer', 5, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '5',
             ));
        $this->hasColumn('taxes_rate', 'integer', 3, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '3',
             ));
        $this->hasColumn('name', 'clob', 65535, array(
             'type' => 'clob',
             'length' => '65535',
             ));
        $this->hasColumn('product_unit_short', 'clob', 65535, array(
             'type' => 'clob',
             'length' => '65535',
             ));
        $this->hasColumn('product_short', 'string', 125, array(
             'type' => 'string',
             'length' => '125',
             ));
        $this->hasColumn('refund_value', 'decimal', 7, array(
             'type' => 'decimal',
             'scale' => '2',
             'length' => '7',
             ));
        $this->hasColumn('product_number', 'string', 25, array(
             'type' => 'string',
             'length' => '25',
             ));
        $this->hasColumn('media_image_id', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '11',
             ));
        $this->hasColumn('media_id', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '11',
             ));
        $this->hasColumn('delivery_date', 'date', null, array(
             'type' => 'date',
             ));


        $this->index('product_order_id', array(
             'fields' => 
             array(
              0 => 'product_order_id',
             ),
             ));
        $this->index('media_image_id_idx', array(
             'fields' => 
             array(
              0 => 'media_image_id',
             ),
             ));
        $this->index('media_id_idx', array(
             'fields' => 
             array(
              0 => 'media_id',
             ),
             ));
        $this->option('collate', 'utf8_bin');
        $this->option('charset', 'utf8');
        $this->option('type', 'InnoDB');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Default_Model_ProductOrder as ProductOrder', array(
             'local' => 'product_order_id',
             'foreign' => 'id'));

        $this->hasOne('Default_Model_MediaImage as MediaImage', array(
             'local' => 'media_image_id',
             'foreign' => 'id'));

        $this->hasOne('Default_Model_Media as Media', array(
             'local' => 'media_id',
             'foreign' => 'id'));

        $this->hasMany('Default_Model_ProductOrderItemUnits as ProductOrderItemUnits', array(
             'local' => 'id',
             'foreign' => 'product_order_item_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $softdelete0 = new Doctrine_Template_SoftDelete();
        $this->actAs($timestampable0);
        $this->actAs($softdelete0);
    }
}