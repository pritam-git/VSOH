<?php

/**
 * Default_Model_Base_Entity
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $short
 * @property string $ch_code
 * @property string $ch_code_dara
 * @property string $cadc
 * @property boolean $disabled
 * @property string $disabled_reset_hash
 * @property integer $role_id
 * @property integer $parent_user_id
 * @property integer $super_parent_id
 * @property integer $department_id
 * @property string $login
 * @property string $password
 * @property string $password_reset_hash
 * @property integer $password_attempt
 * @property string $company
 * @property integer $salutation_id
 * @property string $firstname
 * @property string $lastname
 * @property string $title
 * @property string $street
 * @property string $street_number
 * @property string $address_line_1
 * @property string $address_line_2
 * @property string $zip
 * @property string $city
 * @property integer $kanton_id
 * @property integer $country_id
 * @property integer $contract_type_id
 * @property integer $region_id
 * @property string $spoken_language
 * @property string $billing_company
 * @property string $billing_firstname
 * @property string $billing_lastname
 * @property string $billing_street
 * @property string $billing_street_number
 * @property string $billing_address_line_1
 * @property string $billing_address_line_2
 * @property string $billing_zip
 * @property string $billing_city
 * @property integer $billing_country_id
 * @property string $email
 * @property string $mobile
 * @property string $phone
 * @property string $fax
 * @property string $www
 * @property string $manager_phone
 * @property boolean $is_first_login
 * @property datetime $last_login
 * @property datetime $last_logout
 * @property decimal $latitude
 * @property decimal $longitude
 * @property datetime $activated_at
 * @property integer $media_image_id
 * @property clob $login_with_http_user_agent
 * @property clob $login_with_http_accept
 * @property clob $login_with_http_accept_charset
 * @property clob $login_with_http_accept_encoding
 * @property clob $login_with_http_accept_language
 * @property string $login_with_remote_addr
 * @property boolean $use_all_paymentservices
 * @property integer $district
 * @property string $opel_contract_pw
 * @property string $opel_contract_nf
 * @property string $opel_contract_type
 * @property string $chevrolet_contract
 * @property string $us_contract
 * @property boolean $chevrolet_sp_fr
 * @property boolean $chevrolet_sp_de
 * @property boolean $gm_us_dealer
 * @property boolean $gm_us_sp
 * @property string $gl
 * @property integer $sales_2017
 * @property integer $annual_contribution_status
 * @property integer $annual_contribution_volume
 * @property integer $annual_contribution_sport
 * @property integer $annual_contribution_opel
 * @property integer $annual_contribution_chevrolet
 * @property integer $annual_contribution_us
 * @property integer $annual_contribution_total
 * @property clob $edit_request_data
 * @property string $company_name
 * @property string $commercial_register_id
 * @property string $vat_tax_id
 * @property string $managing_director
 * @property string $branch
 * @property string $contact_name
 * @property string $contact_position
 * @property Default_Model_Role $Role
 * @property Default_Model_Salutation $Salutation
 * @property Default_Model_MediaImage $MediaImage
 * @property Default_Model_Country $Country
 * @property Default_Model_Country $BillingCountry
 * @property Default_Model_Entity $ParentUser
 * @property Default_Model_Department $Department
 * @property Default_Model_Kanton $Kanton
 * @property Default_Model_ContractType $ContractType
 * @property Default_Model_Region $Region
 * @property Default_Model_Entity $SuperParent
 * @property Doctrine_Collection $Entity
 * @property Doctrine_Collection $Media
 * @property Doctrine_Collection $EntityModelListConfig
 * @property Doctrine_Collection $ModelListExport
 * @property Doctrine_Collection $EntityLog
 * @property Doctrine_Collection $ModelMarkedForEditor
 * @property Doctrine_Collection $RememberMediaFolder
 * @property Doctrine_Collection $DatesParticipants
 * @property Doctrine_Collection $EntityM2nBrand
 * @property Doctrine_Collection $DatesParticipantsAnswers
 * @property Doctrine_Collection $RegionDatesParticipantsAnswers
 * @property Doctrine_Collection $RegionDatesParticipants
 * @property Doctrine_Collection $EntityM2nBrandOptionModel
 * @property Doctrine_Collection $SurveyAnswers
 * 
 * @package    L8M
 * @subpackage Models (Default Module)
 * @author     Norbert Marks <nm@l8m.com>
 * @version    SVN: $Id: Builder.php 7 2014-03-11 16:18:40Z nm $
 */
abstract class Default_Model_Base_Entity extends Default_Model_Base_Abstract
{
    public function setTableDefinition()
    {
        $this->setTableName('entity');
        $this->hasColumn('id', 'integer', 11, array(
             'type' => 'integer',
             'primary' => true,
             'unsigned' => true,
             'autoincrement' => true,
             'length' => '11',
             ));
        $this->hasColumn('short', 'string', 120, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '120',
             ));
        $this->hasColumn('ch_code', 'string', 45, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '45',
             ));
        $this->hasColumn('ch_code_dara', 'string', 45, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '45',
             ));
        $this->hasColumn('cadc', 'string', 45, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '45',
             ));
        $this->hasColumn('disabled', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('disabled_reset_hash', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('role_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'length' => '4',
             ));
        $this->hasColumn('parent_user_id', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '11',
             ));
        $this->hasColumn('super_parent_id', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '11',
             ));
        $this->hasColumn('department_id', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '11',
             ));
        $this->hasColumn('login', 'string', 255, array(
             'type' => 'string',
             'unique' => true,
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('password', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('password_reset_hash', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('password_attempt', 'integer', 4, array(
             'type' => 'integer',
             'default' => 0,
             'unsigned' => true,
             'length' => '4',
             ));
        $this->hasColumn('company', 'string', 120, array(
             'type' => 'string',
             'length' => '120',
             ));
        $this->hasColumn('salutation_id', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '11',
             ));
        $this->hasColumn('firstname', 'string', 80, array(
             'type' => 'string',
             'length' => '80',
             ));
        $this->hasColumn('lastname', 'string', 80, array(
             'type' => 'string',
             'length' => '80',
             ));
        $this->hasColumn('title', 'string', 80, array(
             'type' => 'string',
             'length' => '80',
             ));
        $this->hasColumn('street', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('street_number', 'string', 8, array(
             'type' => 'string',
             'length' => '8',
             ));
        $this->hasColumn('address_line_1', 'string', 80, array(
             'type' => 'string',
             'length' => '80',
             ));
        $this->hasColumn('address_line_2', 'string', 80, array(
             'type' => 'string',
             'length' => '80',
             ));
        $this->hasColumn('zip', 'string', 16, array(
             'type' => 'string',
             'length' => '16',
             ));
        $this->hasColumn('city', 'string', 80, array(
             'type' => 'string',
             'length' => '80',
             ));
        $this->hasColumn('kanton_id', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '11',
             ));
        $this->hasColumn('country_id', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '11',
             ));
        $this->hasColumn('contract_type_id', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '11',
             ));
        $this->hasColumn('region_id', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '11',
             ));
        $this->hasColumn('spoken_language', 'string', 2, array(
             'type' => 'string',
             'length' => '2',
             ));
        $this->hasColumn('billing_company', 'string', 120, array(
             'type' => 'string',
             'length' => '120',
             ));
        $this->hasColumn('billing_firstname', 'string', 80, array(
             'type' => 'string',
             'length' => '80',
             ));
        $this->hasColumn('billing_lastname', 'string', 80, array(
             'type' => 'string',
             'length' => '80',
             ));
        $this->hasColumn('billing_street', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('billing_street_number', 'string', 8, array(
             'type' => 'string',
             'length' => '8',
             ));
        $this->hasColumn('billing_address_line_1', 'string', 80, array(
             'type' => 'string',
             'length' => '80',
             ));
        $this->hasColumn('billing_address_line_2', 'string', 80, array(
             'type' => 'string',
             'length' => '80',
             ));
        $this->hasColumn('billing_zip', 'string', 16, array(
             'type' => 'string',
             'length' => '16',
             ));
        $this->hasColumn('billing_city', 'string', 80, array(
             'type' => 'string',
             'length' => '80',
             ));
        $this->hasColumn('billing_country_id', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '11',
             ));
        $this->hasColumn('email', 'string', 255, array(
             'type' => 'string',
             'unique' => true,
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('mobile', 'string', 80, array(
             'type' => 'string',
             'length' => '80',
             ));
        $this->hasColumn('phone', 'string', 80, array(
             'type' => 'string',
             'length' => '80',
             ));
        $this->hasColumn('fax', 'string', 80, array(
             'type' => 'string',
             'length' => '80',
             ));
        $this->hasColumn('www', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('manager_phone', 'string', 80, array(
             'type' => 'string',
             'length' => '80',
             ));
        $this->hasColumn('is_first_login', 'boolean', null, array(
             'type' => 'boolean',
             'default' => true,
             ));
        $this->hasColumn('last_login', 'datetime', null, array(
             'type' => 'datetime',
             ));
        $this->hasColumn('last_logout', 'datetime', null, array(
             'type' => 'datetime',
             ));
        $this->hasColumn('latitude', 'decimal', 15, array(
             'type' => 'decimal',
             'scale' => '10',
             'length' => '15',
             ));
        $this->hasColumn('longitude', 'decimal', 15, array(
             'type' => 'decimal',
             'scale' => '10',
             'length' => '15',
             ));
        $this->hasColumn('activated_at', 'datetime', null, array(
             'type' => 'datetime',
             ));
        $this->hasColumn('media_image_id', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '11',
             ));
        $this->hasColumn('login_with_http_user_agent', 'clob', 65535, array(
             'type' => 'clob',
             'length' => '65535',
             ));
        $this->hasColumn('login_with_http_accept', 'clob', 65535, array(
             'type' => 'clob',
             'length' => '65535',
             ));
        $this->hasColumn('login_with_http_accept_charset', 'clob', 65535, array(
             'type' => 'clob',
             'length' => '65535',
             ));
        $this->hasColumn('login_with_http_accept_encoding', 'clob', 65535, array(
             'type' => 'clob',
             'length' => '65535',
             ));
        $this->hasColumn('login_with_http_accept_language', 'clob', 65535, array(
             'type' => 'clob',
             'length' => '65535',
             ));
        $this->hasColumn('login_with_remote_addr', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('use_all_paymentservices', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('district', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('opel_contract_pw', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('opel_contract_nf', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('opel_contract_type', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('chevrolet_contract', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('us_contract', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('chevrolet_sp_fr', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('chevrolet_sp_de', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('gm_us_dealer', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('gm_us_sp', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('gl', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('sales_2017', 'integer', 11, array(
             'type' => 'integer',
             'length' => '11',
             ));
        $this->hasColumn('annual_contribution_status', 'integer', 11, array(
             'type' => 'integer',
             'length' => '11',
             ));
        $this->hasColumn('annual_contribution_volume', 'integer', 11, array(
             'type' => 'integer',
             'length' => '11',
             ));
        $this->hasColumn('annual_contribution_sport', 'integer', 11, array(
             'type' => 'integer',
             'length' => '11',
             ));
        $this->hasColumn('annual_contribution_opel', 'integer', 11, array(
             'type' => 'integer',
             'length' => '11',
             ));
        $this->hasColumn('annual_contribution_chevrolet', 'integer', 11, array(
             'type' => 'integer',
             'length' => '11',
             ));
        $this->hasColumn('annual_contribution_us', 'integer', 11, array(
             'type' => 'integer',
             'length' => '11',
             ));
        $this->hasColumn('annual_contribution_total', 'integer', 11, array(
             'type' => 'integer',
             'length' => '11',
             ));
        $this->hasColumn('edit_request_data', 'clob', 16777215, array(
             'type' => 'clob',
             'length' => '16777215',
             ));
        $this->hasColumn('company_name', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('commercial_register_id', 'string', 64, array(
             'type' => 'string',
             'length' => '64',
             ));
        $this->hasColumn('vat_tax_id', 'string', 64, array(
             'type' => 'string',
             'length' => '64',
             ));
        $this->hasColumn('managing_director', 'string', 128, array(
             'type' => 'string',
             'length' => '128',
             ));
        $this->hasColumn('branch', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('contact_name', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('contact_position', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));


        $this->index('disabled', array(
             'fields' => 
             array(
              0 => 'disabled',
             ),
             ));
        $this->index('password', array(
             'fields' => 
             array(
              0 => 'password',
             ),
             ));
        $this->index('firstname', array(
             'fields' => 
             array(
              0 => 'firstname',
             ),
             ));
        $this->index('lastname', array(
             'fields' => 
             array(
              0 => 'lastname',
             ),
             ));
        $this->index('street', array(
             'fields' => 
             array(
              0 => 'street',
             ),
             ));
        $this->index('zip', array(
             'fields' => 
             array(
              0 => 'zip',
             ),
             ));
        $this->index('city', array(
             'fields' => 
             array(
              0 => 'city',
             ),
             ));
        $this->index('country', array(
             'fields' => 
             array(
              0 => 'country_id',
             ),
             ));
        $this->index('phone', array(
             'fields' => 
             array(
              0 => 'phone',
             ),
             ));
        $this->index('fax', array(
             'fields' => 
             array(
              0 => 'fax',
             ),
             ));
        $this->index('www', array(
             'fields' => 
             array(
              0 => 'www',
             ),
             ));
        $this->index('media_image_id', array(
             'fields' => 
             array(
              0 => 'media_image_id',
             ),
             ));
        $this->index('role_id_idx', array(
             'fields' => 
             array(
              0 => 'role_id',
             ),
             ));
        $this->index('salutation_id_idx', array(
             'fields' => 
             array(
              0 => 'salutation_id',
             ),
             ));
        $this->index('billing_country_id_idx', array(
             'fields' => 
             array(
              0 => 'billing_country_id',
             ),
             ));
        $this->index('parent_user_id_idx', array(
             'fields' => 
             array(
              0 => 'parent_user_id',
             ),
             ));
        $this->index('department_id_idx', array(
             'fields' => 
             array(
              0 => 'department_id',
             ),
             ));
        $this->index('kanton', array(
             'fields' => 
             array(
              0 => 'kanton_id',
             ),
             ));
        $this->index('contract_type_id_idx', array(
             'fields' => 
             array(
              0 => 'contract_type_id',
             ),
             ));
        $this->index('region_id_idx', array(
             'fields' => 
             array(
              0 => 'region_id',
             ),
             ));
        $this->index('super_parent_id_idx', array(
             'fields' => 
             array(
              0 => 'super_parent_id',
             ),
             ));
        $this->option('collate', 'utf8_bin');
        $this->option('charset', 'utf8');
        $this->option('type', 'InnoDB');

        $this->setSubClasses(array(
             'Default_Model_EntityUser' => 
             array(
              'role_id' => 5,
             ),
             'Default_Model_EntityAdmin' => 
             array(
              'role_id' => 1,
             ),
             'Default_Model_EntitySupervisor' => 
             array(
              'role_id' => 2,
             ),
             'Default_Model_EntityTranslator' => 
             array(
              'role_id' => 4,
             ),
             'Default_Model_EntityAuthor' => 
             array(
              'role_id' => 3,
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Default_Model_Role as Role', array(
             'local' => 'role_id',
             'foreign' => 'id'));

        $this->hasOne('Default_Model_Salutation as Salutation', array(
             'local' => 'salutation_id',
             'foreign' => 'id'));

        $this->hasOne('Default_Model_MediaImage as MediaImage', array(
             'local' => 'media_image_id',
             'foreign' => 'id'));

        $this->hasOne('Default_Model_Country as Country', array(
             'local' => 'country_id',
             'foreign' => 'id'));

        $this->hasOne('Default_Model_Country as BillingCountry', array(
             'local' => 'billing_country_id',
             'foreign' => 'id'));

        $this->hasOne('Default_Model_Entity as ParentUser', array(
             'local' => 'parent_user_id',
             'foreign' => 'id'));

        $this->hasOne('Default_Model_Department as Department', array(
             'local' => 'department_id',
             'foreign' => 'id'));

        $this->hasOne('Default_Model_Kanton as Kanton', array(
             'local' => 'kanton_id',
             'foreign' => 'id'));

        $this->hasOne('Default_Model_ContractType as ContractType', array(
             'local' => 'contract_type_id',
             'foreign' => 'id'));

        $this->hasOne('Default_Model_Region as Region', array(
             'local' => 'region_id',
             'foreign' => 'id'));

        $this->hasOne('Default_Model_Entity as SuperParent', array(
             'local' => 'super_parent_id',
             'foreign' => 'id'));

        $this->hasMany('Default_Model_Entity as Entity', array(
             'local' => 'id',
             'foreign' => 'parent_user_id'));

        $this->hasMany('Default_Model_Media as Media', array(
             'local' => 'id',
             'foreign' => 'entity_id'));

        $this->hasMany('Default_Model_EntityModelListConfig as EntityModelListConfig', array(
             'local' => 'id',
             'foreign' => 'entity_id'));

        $this->hasMany('Default_Model_ModelListExport as ModelListExport', array(
             'local' => 'id',
             'foreign' => 'entity_id'));

        $this->hasMany('Default_Model_EntityLog as EntityLog', array(
             'local' => 'id',
             'foreign' => 'entity_id'));

        $this->hasMany('Default_Model_ModelMarkedForEditor as ModelMarkedForEditor', array(
             'local' => 'id',
             'foreign' => 'entity_id'));

        $this->hasMany('Default_Model_RememberMediaFolder as RememberMediaFolder', array(
             'local' => 'id',
             'foreign' => 'entity_id'));

        $this->hasMany('Default_Model_DatesParticipants as DatesParticipants', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Default_Model_EntityM2nBrand as EntityM2nBrand', array(
             'local' => 'id',
             'foreign' => 'entity_id'));

        $this->hasMany('Default_Model_DatesParticipantsAnswers as DatesParticipantsAnswers', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Default_Model_RegionDatesParticipantsAnswers as RegionDatesParticipantsAnswers', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Default_Model_RegionDatesParticipants as RegionDatesParticipants', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Default_Model_EntityM2nBrandOptionModel as EntityM2nBrandOptionModel', array(
             'local' => 'id',
             'foreign' => 'entity_id'));

        $this->hasMany('Default_Model_SurveyAnswers as SurveyAnswers', array(
             'local' => 'id',
             'foreign' => 'entity_id'));

        $l8m_doctrine_template_activatable0 = new L8M_Doctrine_Template_Activatable();
        $timestampable0 = new Doctrine_Template_Timestampable();
        $softdelete0 = new Doctrine_Template_SoftDelete();
        $this->actAs($l8m_doctrine_template_activatable0);
        $this->actAs($timestampable0);
        $this->actAs($softdelete0);
    }
}